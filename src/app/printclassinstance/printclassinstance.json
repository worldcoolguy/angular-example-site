[{
        "methodName": "CompareObjects",
        "description": "Deep compare any two objects - Supports classes with multilevel Hierarchies",
        "samples": [{
            "title": "",
            "code": "public class Program\n{\n    public static void Main(string[] args)\n    {\n        var simpleObj1 = new Object1 {X = 1, Y=\"A\",Z=\"Z\"};\n        var simpleObj2 = new Object2 { X = \"1\", Y = \"B\",Z=\"Z\" };\n        var diff3 = simpleObj1.CompareObjects(simpleObj2, \"simpleObj1\", \"simpleObj2\");\n        Console.WriteLine(diff3.NoMatchList.Any() ? \"The objects differ\" : \"The objects are same\");\n        diff3.SaveToFile(@\"c:\\tmp\\compare3.txt\");\n    }\n}\npublic class Object1\n{\n    public int X { get; set; }\n    public string Y { get; set; }\n    public string Z { get; set; }\n}\npublic class Object2\n{\n    public string X { get; set; }\n    public string Y { get; set; }\n    public string Z { get; set; }\n}    "
        }]
    },
    {
        "methodName": "MemberNames",
        "description": "Get list of members (Fields,Properties) declared in the class, along with all members declared in all classes in its inheritance hierarchy and includes Private and Static members",
        "samples": [{
            "title": "",
            "code": "public class SimpleObjectNullable\n{\n    public List X { get; set; }\n    public int? Y { get; set; }\n    private int? Z { get; set; }\n}\n\nvar memberList = new SimpleObjectNullable().MemberNames().ToList();"
        }]
    },
    {
        "methodName": "MemberValue",
        "description": "Get value of a member",
        "samples": [{
            "title": "",
            "code": "var memberValue = new SimpleObjectNullable().MemberValue(\"X\");"
        }]
    },
    {
        "methodName": "NullMembers",
        "description": "Get all member names that are Null",
        "samples": [{
            "title": "",
            "code": "var nullMembers = new SimpleObjectNullable().NullMembers().ToList();"
        }]
    },
    {
        "methodName": "DeepClone",
        "description": "Create a deep clone (including private variables and values on Class Hierarchies)",
        "samples": [{
            "title": "",
            "code": "var so1 = new SimpleObjectWithParent\n{\n    X = new List { \"1\", \"2\", \"3\" },\n    Field1 = 5,\n    ParentProperty = 5,\n    GrandparentProperty = 5\n};\nvar so1DeepClone = so1.DeepClone();"
        }]
    }, {
        "methodName": "SetMemberValue",
        "description": "Set member value including Private members. Supports setting values on Class Hierarchies. Returns a string with error message if the operation failed",
        "samples": [{
            "title": "",
            "code": "public class SimpleObjectWithParent : Parent\n{\n    public int Field1;\n    public List X { get; set; }\n    private int Z=10;\n}\npublic class Parent:Grandparent\n{\n    public int ParentProperty { get; set; }\n}\npublic class Grandparent \n{\n    public int GrandparentProperty { get; set; }\n}\n\nvar so1 = new SimpleObjectWithParent\n{\n    X = new List { \"1\", \"2\", \"3\" },\n    Field1 = 5,\n    ParentProperty = 5,\n    GrandparentProperty = 5\n};\nso1.SetMemberValue(\"X\", new List { \"4\",\"5\" });\nso1.SetMemberValue(\"Field1\", 100);\nso1.SetMemberValue(\"ParentProperty\", 100);\nso1.SetMemberValue(\"GrandparentProperty\", 100);\nso1.SetMemberValue(\"Z\", 100);"
        }]
    }, {
        "methodName": "SaveToFile",
        "description": "View or save object graph",
        "samples": [{
            "title": "",
            "code": "namespace PrintClassInstance\n{\n    public class PrintMeGrandParent\n    {\n        private int GrandParentIntPrivatePropertyTest { get; set; }\n    }\n\n    public class PrintMeParent : PrintMeGrandParent\n    {\n        private int ParentIntPrivatePropertyTest { get; set; }\n    }\n\n    public class PrintMe: PrintMeParent\n    {\n        public Tuple TestTuple { get; set; }\n    }\n}\n\nnamespace PrintClassInstance\n{\n    public class Program\n    {\n            static void Main(string[] args)\n            {\n                PrintMe data = GenerateTestDataForPrintMe();\n                data.SaveToFile(@\"c:\\tmp\\instance.txt\");  \n                Console.WriteLine(\"Finished\");\n                Console.ReadLine();\n            }\n    }\n}\n\nOutput text file:\nPrintMe\n{\n    TestTuple = new Tuple`4\n    {\n        Item1 = 1,\n        Item2 = 1,\n        Item3 = 1,\n        Item4 = \"1\",\n    },\n    ParentIntPrivatePropertyTest = 1000,\n    GrandParentIntPrivatePropertyTest = 1000,\n};"
        }]
    }
]
[
{
    "title":"Performance Data",
    "images":[{
            "key":"0",
            "title": "Gradient",
            "ploturl":"https://res.cloudinary.com/harip/image/upload/v1521364614/site/python/min_max.png",
            "code":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport calendar as cl\nfrom matplotlib.pyplot import figure, show, cm\n\ndef weather_pattern():\n    df=pd.read_csv('https://res.cloudinary.com/harip/raw/upload/v1521364790/site/python/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv')\n    df=df.drop(['ID'],axis=1)\n    \n    # Group by date, create seperate dataframes for tmin and tmax and merge \n    df_max1=df[df['Element']==\"TMAX\"].groupby(['Date','Element']).agg({'Data_Value':'max'}).reset_index()\n    df_min2=df[df['Element']==\"TMIN\"].groupby(['Date','Element']).agg({'Data_Value':'min'}).reset_index()\n    df=pd.concat([df_max1,df_min2]).reset_index()    \n    \n    # Create a pivot, tmax and tmin will become columns, split date in year,month,day\n    # Determine the day of the year\n    df= df.groupby(['Date', 'Element'])['Data_Value'].min().unstack('Element').reset_index() \n    df[\"TMAX\"]=df[\"TMAX\"]/10\n    df[\"TMIN\"]=df[\"TMIN\"]/10\n    df[[\"Year\",\"Month\",\"Day\"]] =df[\"Date\"].str.split(\"-\",expand=True).astype('int')\n    df[\"Day_Of_Year\"]=(pd.to_datetime(df[\"Date\"])).dt.dayofyear\n    \n    # Remove leap year data\n    leap_df=df.query('Month ==2 & Day ==29')\n    df=df.drop(leap_df.index.values)\n\n    # Copy 2015 data into a dataframe, and years less than 2015 into another frame\n    df_2015=df[df[\"Year\"]==2015].reindex()\n    df=df[df[\"Year\"]<2015]\n    df=df.drop(['Date','Year'],axis=1)\n\n    # Merge df again based on day of the year\n    df=df.groupby(['Day_Of_Year']).agg({'TMAX':'max','TMIN':'min'}).reset_index()\n\n    # Get 2015 record breaking data\n    df_record=pd.DataFrame(columns=['X','Y'])\n    for k,v in df_2015.iterrows():\n        # Get 2015 values for TMAX for this day and month\n        tmax_value_2000_2014=df[(df[\"Day_Of_Year\"]==v[\"Day_Of_Year\"])][\"TMAX\"].values[0]\n        tmin_value_2000_2014=df[(df[\"Day_Of_Year\"]==v[\"Day_Of_Year\"])][\"TMIN\"].values[0]\n\n        if (v[\"TMAX\"]>tmax_value_2000_2014):\n            df_record.loc[len(df_record)]=[v[\"Day_Of_Year\"],v[\"TMAX\"]]\n\n        if (v[\"TMIN\"]<tmin_value_2000_2014):\n            df_record.loc[len(df_record)]=[v[\"Day_Of_Year\"],v[\"TMIN\"]]      \n\n    # Get x-tick positon at the change of the month (major ticks)\n    # Get the minor ticks (middle of the month) and create labels as momths\n    x_ticks=[ v[1]['Day_Of_Year'] for v in df_2015.iterrows() if v[1]['Day']==1 ]\n    x_minor_ticks= [ (val+x_ticks[idx-1])/2 for idx,val in enumerate(x_ticks) if idx>0 ]\n    x_minor_ticks.append( ( max(x_ticks)+365)/2 )\n    x_minor_labels=[ month[:3] for month in cl.month_name if month!='' ]\n    \n    # Get the line series\n    max_values=df['TMAX'].values\n    min_values=df['TMIN'].values\n    x_values=range(1,len(max_values)+1)\n\n    # Plot the line data and apply a gradient to the entire chart\n    FIG, AX = plt.subplots(nrows=1, ncols=1)\n    FIG.canvas.draw()\n    X = [ [.5, .5],[.6, .6]]\n    AX.imshow(X, interpolation='bicubic', cmap=cm.copper,extent=(1, 365, -40, 50), alpha=1,aspect='auto')\n    AX.plot(x_values,max_values,zorder=1,linewidth=0)\n    AX.plot(x_values,min_values,zorder=1,linewidth=0)\n\n    # Add the scatter plot\n    scatter_colors=[ 1 for val in df_record[\"X\"].values ]\n    AX.scatter(df_record[\"X\"].values,df_record[\"Y\"].values,zorder=2, color='b',label=\"Record 2015 Temperature\", alpha=0.75)\n    AX.set_ylim([-40,50])\n    AX.set_xlim([1,365])\n\n    # Hide the major tick labels (ticks are visible)\n    # Hide the minor ticks (tick labels which are months are visible)\n    AX.tick_params(axis='x',length=0,which='minor')\n    AX.tick_params(axis='y',which='major',labelsize=7.5)\n    AX.set_xticks(x_ticks)\n    AX.set_xticks(x_minor_ticks,minor=True)\n    AX.set_xticklabels([])\n    AX.set_xticklabels(x_minor_labels,minor=True, fontsize=7.5)\n\n    # Set the grid and x,y labels, chart title and Scatter plot legend\n    AX.grid(color='lightgrey',linewidth=0.5)\n    plt.ylabel(\"Temperature (celsius)\", fontsize=9)\n    plt.title(\"Record high and low temperatures (2005-2014)\", fontsize=12)\n    plt.legend(loc=4,fontsize=6.5)\n\n    # Fill area from the TMAX line to the top of chart with white color\n    # Fill area from the TMIN line to the bottom of chart with white color\n    # This will cause the gradient to showup only between the TMAX and TMIN\n    max_y=[50 for min_value in min_values]\n    min_y=[-40 for min_value in min_values]\n    plt.fill_between(x_values,max_values,max_y,facecolor='white',alpha=1)\n    plt.fill_between(x_values,min_values,min_y,facecolor='white',alpha=1)\n\n    # Show the plot\n    plt.show()\n\nweather_pattern()"
        },
        {
            "key":"1",
            "title": "Average Performance Curve with Data Distribution",
            "ploturl":"https://res.cloudinary.com/harip/image/upload/v1520885776/site/python/avgcurvewithdataanddistribution.png",
            "code":"\"\"\"Average performance curve with data distribution\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nimport pandas as pd\n\ndef get_distribution_box(xpos, parentbox, parentbox_xlim):\n    \"\"\"Function that returns the box where the histogram is placed\"\"\"\n\n    xaxis_tick_width = (parentbox.x1-parentbox.x0)/parentbox_xlim\n    hist_chart_x0 = (xpos*xaxis_tick_width)+parentbox.x0\n    hist_chart_width = parentbox.x1+(xaxis_tick_width*xpos)\n    return mtransforms.Bbox([[hist_chart_x0, parentbox.y0], [hist_chart_width, parentbox.y1]])\n\ndef get_distribution_chart(box, parent_yaxis, y_values, x_values, parent_xlim):\n    \"\"\"Function that returns histogram\"\"\"\n\n    hist_chart = parent_yaxis.twiny()\n    hist_chart.axis('off')\n    hist_chart.set_xlim([0, parent_xlim])\n    hist_chart.set_position(box)\n    hist_chart.barh(y_values, x_values, align='center', color='lightgray', zorder=1)\n    return hist_chart\n\nPERF_DATA = pd.read_csv('timeseries.csv')\nGROUP = 3\nPERF_GROUP_DATA = PERF_DATA[PERF_DATA['Group'] == GROUP]\nCOL_NAMES = [colname for colname in PERF_GROUP_DATA.columns.values if \"Age_\" in colname]\nGROUP_AVG_VALUES = pd.Series([PERF_GROUP_DATA[colname].mean() for colname in COL_NAMES])\nXLIM = 27\nYLIM = 100\n\nFIG, AX = plt.subplots(nrows=1, ncols=1)\nPARENT_BOX = AX.get_position()\n\nfor idx, col_name in enumerate(COL_NAMES):\n    age_data = PERF_GROUP_DATA[[col_name]].ix[:, 0].value_counts(sort=False).sort_index()\n    age_data = age_data/age_data.max()\n    y_pos = np.array([k for k, v in age_data.iteritems()])\n    perf = np.array([v for k, v in age_data.iteritems()])\n    distribution_box = get_distribution_box(idx, PARENT_BOX, XLIM)\n    disChart = get_distribution_chart(distribution_box, AX, y_pos, perf, XLIM)\n\nAVG = AX.twiny()\nAVG.plot(GROUP_AVG_VALUES, color='black', zorder=2)\nAX.set_ylim([0, YLIM])\nAX.set_xlim([0, XLIM])\nplt.show()\n"
        },     
        {
            "key":"2",
            "title": "Average Performance Curve with Data",
            "ploturl":"https://res.cloudinary.com/harip/image/upload/v1521062339/avgcurvewithdata.png",
            "code":"\"\"\"Average performance curve for each group\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nPERF_DATA = pd.read_csv('timeseries.csv')\nGROUP = 3\nPERF_GROUP_DATA = PERF_DATA[PERF_DATA['Group'] == GROUP]\n\n# Read column names and ignore Group column\nCOL_NAMES = [colname for colname in PERF_GROUP_DATA.columns.values if \"Age_\" in colname]\n\n# Plot entire data set\nGROUP_VALUES = PERF_GROUP_DATA.drop(columns=['Group']).T\n\n# Get average for the group\nGROUP_AVG_VALUES = pd.Series([PERF_GROUP_DATA[colname].mean() for colname in COL_NAMES])\n\nplt.plot(range(len(COL_NAMES)), GROUP_VALUES, color='lightgray', linewidth=0.5)\nplt.plot(GROUP_AVG_VALUES, color='black')\nplt.show()\n"
        }, 
        {
            "key":"3",
            "title": "Average Performance Curve by Group",
            "ploturl":"https://res.cloudinary.com/harip/image/upload/v1521092368/avgcurveybygroup.png",
            "code":"\"\"\"Average performance curve for each group\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nPERF_DATA = pd.read_csv('timeseries.csv')\n\n# Get distinct groups\nGROUPS = PERF_DATA['Group'].unique()\nGROUPS = sorted(GROUPS[~np.isnan(GROUPS)])\n\n# Read column names and ignore Group column\nCOL_NAMES = [colname for colname in PERF_DATA.columns.values if \"Age_\" in colname]\n\nPERF_AVGDATA_GROUPS = pd.DataFrame()\nfor group in GROUPS:\n    group_values = PERF_DATA[PERF_DATA['Group'] == group]\n    group_name = f'Group {int(group)}'\n    group_means = [group_values[colname].mean() for colname in COL_NAMES]\n    group_avg_values = pd.Series(group_means, name=group_name)\n    PERF_AVGDATA_GROUPS = PERF_AVGDATA_GROUPS.append(group_avg_values)\n\nPERF_AVGDATA_GROUPS.T.plot()\nplt.show()\n"
        },
        {
            "key":"4",
            "title": "Average Performance Curve",
            "ploturl":"https://res.cloudinary.com/harip/image/upload/v1521062358/avgcurve.png",
            "code":"\"\"\"Average performance curve\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nPERF_DATA = pd.read_csv('timeseries.csv')\n\n# Read column names\nCOL_NAMES = list(PERF_DATA.columns.values)\n\n# get average values for each column as a series\nAVG_VALUES = pd.Series([PERF_DATA[col_name].mean() for col_name in COL_NAMES])\n\n# plot series\nAVG_VALUES.plot(kind='line', grid=True, ylim={0, 100})\nplt.show()\n"
        }
    ]
} 
]
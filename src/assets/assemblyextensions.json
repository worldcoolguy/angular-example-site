{
"title":"AssemblyExtensions",
"description":"AssemblyExtensions  is a .NET Core class library that can be used to to get metadata for an assembly.",
"packageLink":"https://www.nuget.org/packages/AssemblyExtensions",
"location":"Nuget",
"hideList":true,
"data":[{
        "methodName": "Usage",
        "samples": [{
            "title": "Sample Test Data",
            "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace TestAssemblyExtensions.TestData\n{\n    public class SimpleObjectWithParent : Parent\n    {\n        public int Field1;\n        public List<string> X { get; set; }\n        private int Z = 10;\n\n        public int GetCount()\n        {\n            return Z;\n        }\n    }\n    public class Parent : Grandparent\n    {\n        public int ParentProperty { get; set; }\n    }\n    public class Grandparent\n    {\n        public int GrandparentProperty { get; set; }\n    }\n}\n\nnamespace TestAssemblyExtensions.TestData1\n{\n    public abstract class AbsClass\n    {\n        public int X { get; set; }\n    }\n\n    public interface IInterfaceClass\n    {\n        void X();\n        int Ix { get; set; }\n    }\n\n    public class InterfaceClass : IInterfaceClass\n    {\n        public void X()\n        {\n            throw new NotImplementedException();\n        }\n\n        public int Ix { get; set; }\n    }\n}"
        }, {
            "title": "Sample Test Program",
            "code": "class Program\n{\n    static void Main(string[] args)\n    {\n        var assembly = typeof(Program).GetTypeInfo().Assembly;\n\n        var typeNames = assembly.GetAllTypesNames();\n\n        var types = assembly.GetAllTypes();\n\n        var members = assembly.GetAllMemberNames();\n\n        var namespaces = assembly.GetAllNameSpacesNames();\n\n        var allMethods = assembly.GetAllMethods();\n\n        var allMethodsMeta = assembly.GetAllMethodsMetaData();\n    }\n}"
        }]
}]
}